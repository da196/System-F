/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2020-01-21 12:20:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.backend.actions.bi;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.text.*;
import java.util.Vector;
import java.util.Vector;
import tcms.analysis.*;
import java.io.PrintWriter;
import net.sf.json.JSONObject;
import net.sf.ezmorph.Morpher;

public final class BINewsStandard_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("tcms.analysis");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.PrintWriter");
    _jspx_imports_classes.add("java.util.Vector");
    _jspx_imports_classes.add("net.sf.ezmorph.Morpher");
    _jspx_imports_classes.add("net.sf.json.JSONObject");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	String channel_id = request.getParameter("channel_id");  
	String analyzed_date = request.getParameter("analyzed_date");  
	String language = request.getParameter("language");  
	String news_category_id = request.getParameter("news_category_id");  
	java.util.List<String> naList = NewsStandard.getNALocalNewsStandard(channel_id, analyzed_date, language, news_category_id);
	java.util.List<String> yesList = NewsStandard.getYesLocalNewsStandard(channel_id, analyzed_date, language, news_category_id);
	java.util.List<String> noList = NewsStandard.getNoLocalNewsStandard(channel_id, analyzed_date, language, news_category_id);

		JSONObject json = new JSONObject();

		long Accuracy = Long.parseLong(yesList.get(0));
		long Impartial = Long.parseLong(yesList.get(1));
		long Fair = Long.parseLong(yesList.get(2));
		long Balanced = Long.parseLong(yesList.get(3));
		long FactsDistortion = Long.parseLong(yesList.get(4));
		long Picture = Long.parseLong(yesList.get(5));
		long DisVictimChildren = Long.parseLong(yesList.get(6));
		long ProperPronunciation = Long.parseLong(yesList.get(7));
		long SignLanguage = Long.parseLong(yesList.get(8));
		
		long AccuracyNo = Long.parseLong(noList.get(0));
		long ImpartialNo = Long.parseLong(noList.get(1));
		long FairNo = Long.parseLong(noList.get(2));
		long BalancedNo = Long.parseLong(noList.get(3));
		long FactsDistortionNo = Long.parseLong(noList.get(4));
		long PictureNo = Long.parseLong(noList.get(5));
		long DisVictimChildrenNo = Long.parseLong(noList.get(6));
		long ProperPronunciationNo = Long.parseLong(noList.get(7));
		long SignLanguageNo = Long.parseLong(noList.get(8));
		
		long AccuracyNA = Long.parseLong(naList.get(0));
		long ImpartialNA = Long.parseLong(naList.get(1));
		long FairNA = Long.parseLong(naList.get(2));
		long BalancedNA = Long.parseLong(naList.get(3));
		long FactsDistortionNA = Long.parseLong(naList.get(4));
		long PictureNA = Long.parseLong(naList.get(5));
		long DisVictimChildrenNA = Long.parseLong(naList.get(6));
		long ProperPronunciationNA = Long.parseLong(naList.get(7));
		long SignLanguageNA = Long.parseLong(naList.get(8));
		
		json.accumulate("Accuracy", Accuracy);
		json.accumulate("Impartial", Impartial);
		json.accumulate("Fair", Fair);
		json.accumulate("Balanced", Balanced);
		json.accumulate("FactsDistortion", FactsDistortion);
		json.accumulate("Picture", Picture);
		json.accumulate("DisVictimChildren", DisVictimChildren);
		json.accumulate("ProperPronunciation", ProperPronunciation);
		json.accumulate("SignLanguage", SignLanguage);
		
		json.accumulate("AccuracyNo", AccuracyNo);
		json.accumulate("ImpartialNo", ImpartialNo);
		json.accumulate("FairNo", FairNo);
		json.accumulate("BalancedNo", BalancedNo);
		json.accumulate("FactsDistortionNo", FactsDistortionNo);
		json.accumulate("PictureNo", PictureNo);
		json.accumulate("DisVictimChildrenNo", DisVictimChildrenNo);
		json.accumulate("ProperPronunciationNo", ProperPronunciationNo);
		json.accumulate("SignLanguageNo", SignLanguageNo);

		json.accumulate("AccuracyNA", AccuracyNA);
		json.accumulate("ImpartialNA", ImpartialNA);
		json.accumulate("FairNA", FairNA);
		json.accumulate("BalancedNA", BalancedNA);
		json.accumulate("FactsDistortionNA", FactsDistortionNA);
		json.accumulate("PictureNA", PictureNA);
		json.accumulate("DisVictimChildrenNA", DisVictimChildrenNA);
		json.accumulate("ProperPronunciationNA", ProperPronunciationNA);
		json.accumulate("SignLanguageNA", SignLanguageNA);
		
		out.print(json.toString());
		//System.out.println(json.toString());

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
