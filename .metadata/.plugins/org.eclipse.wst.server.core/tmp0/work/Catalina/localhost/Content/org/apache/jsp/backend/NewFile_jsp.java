/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2020-03-25 07:36:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.backend;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class NewFile_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("    <head>\r\n");
      out.write("        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\r\n");
      out.write("        <title>AudioSpectrum in JavaScript</title>\r\n");
      out.write("    </head>\r\n");
      out.write("    <body>\r\n");
      out.write("        <!-- Create a div where the audio waves will be shown --> \r\n");
      out.write("        <div id=\"audio-spectrum\" style=\"width: 250px; heigth: 400px;\"></div>\r\n");
      out.write("\r\n");
      out.write("        <!-- Create action buttons -->\r\n");
      out.write("        <input type=\"button\" id=\"btn-play\" value=\"Play\" disabled=\"disabled\"/>\r\n");
      out.write("        <input type=\"button\" id=\"btn-pause\" value=\"Pause\" disabled=\"disabled\"/>\r\n");
      out.write("        <input type=\"button\" id=\"btn-stop\" value=\"Stop\" disabled=\"disabled\" />\r\n");
      out.write("\r\n");
      out.write("        <!-- Load the wavesurferscript , in this case from a CDN -->\r\n");
      out.write("        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/wavesurfer.js/1.3.7/wavesurfer.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("        <script>\r\n");
      out.write("            // Store the 3 buttons in some object\r\n");
      out.write("            var buttons = {\r\n");
      out.write("                play: document.getElementById(\"btn-play\"),\r\n");
      out.write("                pause: document.getElementById(\"btn-pause\"),\r\n");
      out.write("                stop: document.getElementById(\"btn-stop\")\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            // Create an instance of wave surfer with its configuration\r\n");
      out.write("            var Spectrum = WaveSurfer.create({\r\n");
      out.write("                container: '#audio-spectrum',\r\n");
      out.write("                progressColor: \"#03a9f4\"\r\n");
      out.write("            });\r\n");
      out.write("\r\n");
      out.write("            // Handle Play button\r\n");
      out.write("            buttons.play.addEventListener(\"click\", function(){\r\n");
      out.write("                Spectrum.play();\r\n");
      out.write("\r\n");
      out.write("                // Enable/Disable respectively buttons\r\n");
      out.write("                buttons.stop.disabled = false;\r\n");
      out.write("                buttons.pause.disabled = false;\r\n");
      out.write("                buttons.play.disabled = true;\r\n");
      out.write("            }, false);\r\n");
      out.write("\r\n");
      out.write("            // Handle Pause button\r\n");
      out.write("            buttons.pause.addEventListener(\"click\", function(){\r\n");
      out.write("                Spectrum.pause();\r\n");
      out.write("\r\n");
      out.write("                // Enable/Disable respectively buttons\r\n");
      out.write("                buttons.pause.disabled = true;\r\n");
      out.write("                buttons.play.disabled = false;\r\n");
      out.write("            }, false);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            // Handle Stop button\r\n");
      out.write("            buttons.stop.addEventListener(\"click\", function(){\r\n");
      out.write("                Spectrum.stop();\r\n");
      out.write("\r\n");
      out.write("                // Enable/Disable respectively buttons\r\n");
      out.write("                buttons.pause.disabled = true;\r\n");
      out.write("                buttons.play.disabled = false;\r\n");
      out.write("                buttons.stop.disabled = true;\r\n");
      out.write("            }, false);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("            // Add a listener to enable the play button once it's ready\r\n");
      out.write("            Spectrum.on('ready', function () {\r\n");
      out.write("                buttons.play.disabled = false;\r\n");
      out.write("            });\r\n");
      out.write("            \r\n");
      out.write("            // If you want a responsive mode (so when the user resizes the window)\r\n");
      out.write("            // the spectrum will be still playable\r\n");
      out.write("            window.addEventListener(\"resize\", function(){\r\n");
      out.write("                // Get the current progress according to the cursor position\r\n");
      out.write("                var currentProgress = Spectrum.getCurrentTime() / Spectrum.getDuration();\r\n");
      out.write("\r\n");
      out.write("                // Reset graph\r\n");
      out.write("                Spectrum.empty();\r\n");
      out.write("                Spectrum.drawBuffer();\r\n");
      out.write("                // Set original position\r\n");
      out.write("                Spectrum.seekTo(currentProgress);\r\n");
      out.write("\r\n");
      out.write("                // Enable/Disable respectively buttons\r\n");
      out.write("                buttons.pause.disabled = true;\r\n");
      out.write("                buttons.play.disabled = false;\r\n");
      out.write("                buttons.stop.disabled = false;\r\n");
      out.write("            }, false);\r\n");
      out.write("\r\n");
      out.write("            // Load the audio file from your domain !\r\n");
      out.write("            Spectrum.load('vid/001.mp3');\r\n");
      out.write("        </script>\r\n");
      out.write("    </body>\r\n");
      out.write("</html>                                                                                                                                                                                                                                                                                                        ");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
